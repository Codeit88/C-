#include<iostream>
using namespace std;
class Linklist {
	class Node {
	public:
		int data;
		Node* next;
		friend class Linklist;
		Node() {}
		Node(int data, Node* next) {
			this->data = data;
			this->next = next;
		}
		~Node() {
			delete next;
		}
	};
private:
	Node* head, * tail;
public:
	Linklist() {
		head = tail = NULL;
	}
	void insertathead(int const elem) {
		Node* temp = new Node;
		temp->data = elem;
		if (head == NULL) {
			temp->next = head;
			head = temp;
			tail = temp;
		}
		else {
			temp->next = head;
			head = temp;
		}
	}
	void insertAtTail(int const elem) {
		Node* temp = new Node;
		temp->data = elem;
		if (head == NULL) {
			temp->next = head;
			head = temp;
		}
		else {
			temp->next = NULL;
			tail->next = temp;
			tail = temp;
		}
	}
	void DeleteFromHead() {
		head = head->next;
	}
	void DeleteFromTail() {
		Node* temp = head;
		while (temp->next!=tail) {
			temp = temp->next;
		}
		temp->next = NULL;
		tail = temp;
	}
	int getsize() const {
		Node* temp = head;
		int count = 0;
		while (temp != NULL) {
			count++;
			temp = temp->next;
		}
		return count;
	}
	int getMiddle() const {
	    int count = getsize();
		Node*temp = head;
		for (int i = 0;i < (count / 2) ;i++) {
			temp = temp->next;
		}
		return temp->data;
	}
	bool IsEmpty() {
		if (head == nullptr) {
			return true;
		}
		else
			return false;
	}
	void InsertAfter(int val,int key) {
		Node* temp = head;
		int count = 0,flag=0;
		while (temp != NULL) {
			if (temp->data == key) {
				flag = 1;
				Node* temp2 = new Node;
				temp2->data = val;
				temp2->next = temp->next;
				temp->next = temp2;
				count++;
			}
			temp = temp->next;
			count++;
		}
		if(count==getsize()&&flag!=1){
			Node* temp3 = new Node;
			temp3->data = val;
			temp3->next = NULL;
			tail->next = temp3;
			tail = temp3;
		}
	}
	void InsertBefore(int val,int key) {
		Node* temp = head;
		Node* prev = head;
		int count = 0, flag = 0;
		while (temp != NULL) {
			if (temp->data == key) {
				flag = 1;
				Node* temp2 = new Node;
				temp2->data = val;
				temp2->next = prev->next;
				prev->next = temp2;
				count++;
			}
			prev = temp;
			temp = temp->next;
			count++;
		}
		if (count == getsize() && flag != 1) {
			Node* temp3 = new Node;
			temp3->data = val;
			temp3->next = NULL;
			tail->next = temp3;
			tail = temp3;
		}
	}
	int getMax() const {
		Node* temp = head;
		int max = temp->data;
		while (temp != NULL) {
			if (temp->data > max) {
				max = temp->data;
			}
			temp = temp->next;
		}
		return max;
	}
	int getMin() const {
		Node* temp = head;
		int min = temp->data;
		while (temp != NULL) {
			if (temp->data < min) {
				min = temp->data;
			}
			temp = temp->next;
		}
		return min;
	}
	int getAverage() const {
		int avg = 0;
		Node* temp = head;
		while (temp != NULL) {
			avg += temp->data;
			temp = temp->next;
		}
		return avg / getsize();
	}
	bool Swap(int LeftIndex,int RightIndex) {
		Node* prevx = new Node;
		Node* prevy = new Node;
		Node* x = new Node;
		Node* y = new Node;

	}
	void printForward() const {
		Node* temp = head;
		while (temp != NULL) {
			cout << temp->data << "->";
			temp = temp->next;
		}
		cout << "NULL";
		cout << endl;
	}
};

int main() {
	Linklist l1;
	l1.insertathead(42);

	return 0;
}
